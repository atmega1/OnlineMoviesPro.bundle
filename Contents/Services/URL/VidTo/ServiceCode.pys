import re, urlparse, cgi, urllib, urllib2, cookielib, time
from BeautifulSoup import BeautifulSoup

USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'

def NormalizeURL(url):

	#Log("*********** In MovReel NormalizeURL")
	
	# Deal with special providerInfo URL built up by IceFilms plugin to return
	# info about this provider. For all other normal URLs, do nothing. 
	if ("providerinfo" in url):
	
		try:
			show = Prefs["show_180upload"]
		except Exception, ex:
			show = True
			
		if (show):
			return url + "&visible=true"
		else:
			return url
			
	else:
		return url
	
def MetadataObjectForURL(url):
 
	#Log('In MetadataObjectForURL for MovReel (' + url + ')')
	
	video = VideoClipObject(
		title = 'MovReel Redirect Page',
		summary = 'MovReel Redirect Page',
		thumb = None,
	)
	
	return video
	
def MediaObjectsForURL(url):

	ret = []
	ret.append(
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
		)
	)
	
  	return ret

@indirect
def PlayVideo(url):

	cj = cookielib.CookieJar()
	opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))

	# Request initial page...
	#Log("------------------------------------------------------------------------------")
	#Log("Requesting: " + url)
	
	request = urllib2.Request(url)
	request.add_header('User-agent', USER_AGENT)
	request.add_header('Referer', url)
	response = opener.open(request)
	
	soup = BeautifulSoup(response.read())
	
	# Deal with initial page.
	# Extract out these form elements...
	formElems = ['down_script','id', 'op', 'rand']
	params = {}
	
	for formElem in formElems:
		formElemVal =  soup.find('input', {'name' : formElem })['value']
		params[formElem] = formElemVal
		
	# Submit form with extracted elements.
	#Log("****************************************************************************")
	#Log("Requesting: " + url)
	#Log("Params: " + str(params))
	
	request = urllib2.Request(url, urllib.urlencode(params))
	request.add_header('User-agent', USER_AGENT)
	request.add_header('Referer', url)
	response = opener.open(request)
	
	soup = BeautifulSoup(response.read())
	
	# Collect redirect URL and return it.
	final_url = soup.find('a', text="Download Link").parent['href']
		
	Log("final url: " + final_url)
	
	if (final_url is None):
		return LogProviderError("Couldn't extract video URL from page.")
		
	return ObjectContainer(
		objects = [
			VideoClipObject(
				items = [
					MediaObject(
						parts = [PartObject(key=final_url)],
					)
				]
			)
		]
	)

def LogProviderError(msg="", ex=None):

	Log("************************** PROVIDER ERROR: " + msg)
	raise Exception(msg)
	return []